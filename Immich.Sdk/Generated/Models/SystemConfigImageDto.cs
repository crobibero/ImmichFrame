// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Sdk.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class SystemConfigImageDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The colorspace property</summary>
        public global::Immich.Sdk.Generated.Models.Colorspace? Colorspace { get; set; }
        /// <summary>The extractEmbedded property</summary>
        public bool? ExtractEmbedded { get; set; }
        /// <summary>The previewFormat property</summary>
        public global::Immich.Sdk.Generated.Models.ImageFormat? PreviewFormat { get; set; }
        /// <summary>The previewSize property</summary>
        public int? PreviewSize { get; set; }
        /// <summary>The quality property</summary>
        public int? Quality { get; set; }
        /// <summary>The thumbnailFormat property</summary>
        public global::Immich.Sdk.Generated.Models.ImageFormat? ThumbnailFormat { get; set; }
        /// <summary>The thumbnailSize property</summary>
        public int? ThumbnailSize { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Models.SystemConfigImageDto"/> and sets the default values.
        /// </summary>
        public SystemConfigImageDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Models.SystemConfigImageDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Sdk.Generated.Models.SystemConfigImageDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Sdk.Generated.Models.SystemConfigImageDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "colorspace", n => { Colorspace = n.GetEnumValue<global::Immich.Sdk.Generated.Models.Colorspace>(); } },
                { "extractEmbedded", n => { ExtractEmbedded = n.GetBoolValue(); } },
                { "previewFormat", n => { PreviewFormat = n.GetEnumValue<global::Immich.Sdk.Generated.Models.ImageFormat>(); } },
                { "previewSize", n => { PreviewSize = n.GetIntValue(); } },
                { "quality", n => { Quality = n.GetIntValue(); } },
                { "thumbnailFormat", n => { ThumbnailFormat = n.GetEnumValue<global::Immich.Sdk.Generated.Models.ImageFormat>(); } },
                { "thumbnailSize", n => { ThumbnailSize = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Immich.Sdk.Generated.Models.Colorspace>("colorspace", Colorspace);
            writer.WriteBoolValue("extractEmbedded", ExtractEmbedded);
            writer.WriteEnumValue<global::Immich.Sdk.Generated.Models.ImageFormat>("previewFormat", PreviewFormat);
            writer.WriteIntValue("previewSize", PreviewSize);
            writer.WriteIntValue("quality", Quality);
            writer.WriteEnumValue<global::Immich.Sdk.Generated.Models.ImageFormat>("thumbnailFormat", ThumbnailFormat);
            writer.WriteIntValue("thumbnailSize", ThumbnailSize);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
