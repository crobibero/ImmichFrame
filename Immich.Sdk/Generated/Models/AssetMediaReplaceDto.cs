// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Sdk.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class AssetMediaReplaceDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assetData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetData { get; set; }
#nullable restore
#else
        public string AssetData { get; set; }
#endif
        /// <summary>The deviceAssetId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceAssetId { get; set; }
#nullable restore
#else
        public string DeviceAssetId { get; set; }
#endif
        /// <summary>The deviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The duration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Duration { get; set; }
#nullable restore
#else
        public string Duration { get; set; }
#endif
        /// <summary>The fileCreatedAt property</summary>
        public DateTimeOffset? FileCreatedAt { get; set; }
        /// <summary>The fileModifiedAt property</summary>
        public DateTimeOffset? FileModifiedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Models.AssetMediaReplaceDto"/> and sets the default values.
        /// </summary>
        public AssetMediaReplaceDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Models.AssetMediaReplaceDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Sdk.Generated.Models.AssetMediaReplaceDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Sdk.Generated.Models.AssetMediaReplaceDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assetData", n => { AssetData = n.GetStringValue(); } },
                { "deviceAssetId", n => { DeviceAssetId = n.GetStringValue(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "duration", n => { Duration = n.GetStringValue(); } },
                { "fileCreatedAt", n => { FileCreatedAt = n.GetDateTimeOffsetValue(); } },
                { "fileModifiedAt", n => { FileModifiedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("assetData", AssetData);
            writer.WriteStringValue("deviceAssetId", DeviceAssetId);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("duration", Duration);
            writer.WriteDateTimeOffsetValue("fileCreatedAt", FileCreatedAt);
            writer.WriteDateTimeOffsetValue("fileModifiedAt", FileModifiedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
