// <auto-generated/>
using Immich.Sdk.Generated.Faces.Item;
using Immich.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Immich.Sdk.Generated.Faces
{
    /// <summary>
    /// Builds and executes requests for operations under \faces
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class FacesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Immich.Sdk.Generated.faces.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Faces.Item.FacesItemRequestBuilder"/></returns>
        public global::Immich.Sdk.Generated.Faces.Item.FacesItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Immich.Sdk.Generated.Faces.Item.FacesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Faces.FacesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FacesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/faces?id={id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Faces.FacesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FacesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/faces?id={id}", rawUrl)
        {
        }
        /// <returns>A List&lt;global::Immich.Sdk.Generated.Models.AssetFaceResponseDto&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Immich.Sdk.Generated.Models.AssetFaceResponseDto>?> GetAsync(Action<RequestConfiguration<global::Immich.Sdk.Generated.Faces.FacesRequestBuilder.FacesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Immich.Sdk.Generated.Models.AssetFaceResponseDto>> GetAsync(Action<RequestConfiguration<global::Immich.Sdk.Generated.Faces.FacesRequestBuilder.FacesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Immich.Sdk.Generated.Models.AssetFaceResponseDto>(requestInfo, global::Immich.Sdk.Generated.Models.AssetFaceResponseDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Immich.Sdk.Generated.Faces.FacesRequestBuilder.FacesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Immich.Sdk.Generated.Faces.FacesRequestBuilder.FacesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Faces.FacesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Immich.Sdk.Generated.Faces.FacesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Immich.Sdk.Generated.Faces.FacesRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        #pragma warning disable CS1591
        public partial class FacesRequestBuilderGetQueryParameters 
        #pragma warning restore CS1591
        {
            [QueryParameter("id")]
            public Guid? Id { get; set; }
        }
    }
}
