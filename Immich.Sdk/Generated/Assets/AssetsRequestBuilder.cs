// <auto-generated/>
using Immich.Sdk.Generated.Assets.BulkUploadCheck;
using Immich.Sdk.Generated.Assets.Device;
using Immich.Sdk.Generated.Assets.Exist;
using Immich.Sdk.Generated.Assets.Item;
using Immich.Sdk.Generated.Assets.Jobs;
using Immich.Sdk.Generated.Assets.MemoryLane;
using Immich.Sdk.Generated.Assets.RandomNamespace;
using Immich.Sdk.Generated.Assets.Stack;
using Immich.Sdk.Generated.Assets.Statistics;
using Immich.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Immich.Sdk.Generated.Assets
{
    /// <summary>
    /// Builds and executes requests for operations under \assets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class AssetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulkUploadCheck property</summary>
        public global::Immich.Sdk.Generated.Assets.BulkUploadCheck.BulkUploadCheckRequestBuilder BulkUploadCheck
        {
            get => new global::Immich.Sdk.Generated.Assets.BulkUploadCheck.BulkUploadCheckRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The device property</summary>
        public global::Immich.Sdk.Generated.Assets.Device.DeviceRequestBuilder Device
        {
            get => new global::Immich.Sdk.Generated.Assets.Device.DeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The exist property</summary>
        public global::Immich.Sdk.Generated.Assets.Exist.ExistRequestBuilder Exist
        {
            get => new global::Immich.Sdk.Generated.Assets.Exist.ExistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jobs property</summary>
        public global::Immich.Sdk.Generated.Assets.Jobs.JobsRequestBuilder Jobs
        {
            get => new global::Immich.Sdk.Generated.Assets.Jobs.JobsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The memoryLane property</summary>
        public global::Immich.Sdk.Generated.Assets.MemoryLane.MemoryLaneRequestBuilder MemoryLane
        {
            get => new global::Immich.Sdk.Generated.Assets.MemoryLane.MemoryLaneRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The random property</summary>
        public global::Immich.Sdk.Generated.Assets.RandomNamespace.RandomRequestBuilder Random
        {
            get => new global::Immich.Sdk.Generated.Assets.RandomNamespace.RandomRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stack property</summary>
        public global::Immich.Sdk.Generated.Assets.Stack.StackRequestBuilder Stack
        {
            get => new global::Immich.Sdk.Generated.Assets.Stack.StackRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statistics property</summary>
        public global::Immich.Sdk.Generated.Assets.Statistics.StatisticsRequestBuilder Statistics
        {
            get => new global::Immich.Sdk.Generated.Assets.Statistics.StatisticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Immich.Sdk.Generated.assets.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Assets.Item.AssetsItemRequestBuilder"/></returns>
        public global::Immich.Sdk.Generated.Assets.Item.AssetsItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Immich.Sdk.Generated.Assets.Item.AssetsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AssetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/assets{?key*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AssetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/assets{?key*}", rawUrl)
        {
        }
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(global::Immich.Sdk.Generated.Models.AssetBulkDeleteDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(global::Immich.Sdk.Generated.Models.AssetBulkDeleteDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Models.AssetMediaResponseDto"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Immich.Sdk.Generated.Models.AssetMediaResponseDto?> PostAsync(global::Immich.Sdk.Generated.Models.AssetMediaCreateDto body, Action<RequestConfiguration<global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder.AssetsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Immich.Sdk.Generated.Models.AssetMediaResponseDto> PostAsync(global::Immich.Sdk.Generated.Models.AssetMediaCreateDto body, Action<RequestConfiguration<global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder.AssetsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Immich.Sdk.Generated.Models.AssetMediaResponseDto>(requestInfo, global::Immich.Sdk.Generated.Models.AssetMediaResponseDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PutAsync(global::Immich.Sdk.Generated.Models.AssetBulkUpdateDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PutAsync(global::Immich.Sdk.Generated.Models.AssetBulkUpdateDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(global::Immich.Sdk.Generated.Models.AssetBulkDeleteDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(global::Immich.Sdk.Generated.Models.AssetBulkDeleteDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Immich.Sdk.Generated.Models.AssetMediaCreateDto body, Action<RequestConfiguration<global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder.AssetsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Immich.Sdk.Generated.Models.AssetMediaCreateDto body, Action<RequestConfiguration<global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder.AssetsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Immich.Sdk.Generated.Models.AssetBulkUpdateDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Immich.Sdk.Generated.Models.AssetBulkUpdateDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Immich.Sdk.Generated.Assets.AssetsRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        #pragma warning disable CS1591
        public partial class AssetsRequestBuilderPostQueryParameters 
        #pragma warning restore CS1591
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("key")]
            public string? Key { get; set; }
#nullable restore
#else
            [QueryParameter("key")]
            public string Key { get; set; }
#endif
        }
    }
}
